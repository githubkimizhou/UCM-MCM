/****************************************************************************
 *
 * Multiedia Controller Module(MCM).  
 *
 * Copyright (c) 2017 by Grandstream Networks, Inc.
 * All rights reserved.
 *
 * This material is proprietary to Grandstream Networks, Inc. and,
 * in addition to the above mentioned Copyright, may be
 * subject to protection under other intellectual property
 * regimes, including patents, trade secrets, designs and/or
 * trademarks.
 *
 * Any use of this material for any purpose, except with an
 * express license from Grandstream Networks, Inc. is strictly
 * prohibited.
 *
 *
 * \brief AVS Component Adaptor.
 *
 * \author Kimi Zhou <lzhou@grandstream.cn>
 *
 *	avs_controllor is a bridge between AVS and Conference Manager, it acts
 *  as a role like an adaptor.
 *
 ***************************************************************************/

#ifndef AVS_CONTROLLER_H
#define AVS_CONTROLLER_H

#define IPADDR_LEN		25
#define IPPORTADDR_LEN  	25
#define USERNAME_LEN 		20
#define PASSWORD_LEN		20
#define FILEPATH 		50
#define CONFID_LEN 		20
#define CHANID_LEN 		20
#define PORTID_LEN		20
#define TRACKID_LEN		20
#define MESSAGE_REPONSE		100
#define CANDIDATE_LEN		200
#define FINGERPRINT_LEN		100
#define ICEUFRAG_LEN		5
#define ICEPWD_LEN		22

/**
 * enum turn_protocal - TURN protocal.
 *
 * @PROTOCAL1:  
 * @PROTOCAL2:
 */
enum turn_protocal {
	PROTOCAL1,
	PROTOCAL2
};

/**
 * enum avs_audio_codec - Audio codecs.
 */
enum avs_audio_codec {
	AVS_AUDIO_CODEC_PCMU,
	AVS_AUDIO_CODEC_PCMA,
	AVS_AUDIO_CODEC_GSM,
	AVS_AUDIO_CODEC_ILBC,
	AVS_AUDIO_CODEC_G722,
	AVS_AUDIO_CODEC_G722_1,
	AVS_AUDIO_CODEC_G722_1C,
	AVS_AUDIO_CODEC_G729,
	AVS_AUDIO_CODEC_G723_1,
	AVS_AUDIO_CODEC_G726,
	AVS_AUDIO_CODEC_ADPCM32
};

/**
 * enum avs_video_codec - Video codecs.
 */
enum avs_video_codec {
	AVS_VIDEO_CODEC_H264,
	AVS_VIDEO_CODEC_H265,
	AVS_VIDEO_CODEC_VP8,
	AVS_VIDEO_CODEC_VP9
};

/**
 * struct avs_common_resp_info - Common response infomations return from AVS. This is only used when AVS does not return any valuable informations, but just state returns.
 *
 * @code:  0:sucess, -1:error.
 * @message:  Descriptions of return value.
 */
struct avs_common_resp_info {
	int code;
	char message[MESSAGE_REPONSE];
};

/**
 * enum avs_cmd_result - The result of sending commanders to AVS.
 *
 * @LINK_DISCONNECT:  The HTTP connection between AVS and avs conntroller has been broken.
 * @ERROR:  Maybe socket error???
 * @SUCCESS:  Sending commanders to AVS sucessfully.
 */
typedef enum avs_cmd_result {
	LINK_DISCONNECT = -2,
	ERROR,
	SUCCESS
} AVS_CMD_RESULT;

/**
 * struct avs_param - The parameters set to AVS.
 *
 * @stun_ipaddr:  IP address of STUN server.
 * @stun_port:  Port of STUN server.
 * @turn_ipaddr:  IP address of TURN server.
 * @turn_port:  Port of TURN server.
 * @turn_username:  Username for authentication of TURN server.
 * @turn_password:  Password for authentication of TURN server.
 * @turn_protocal:  Portocal that TURN uses.
 * @moh_filepath:  File path for MOH.
 */
struct avs_param {
	char stun_ipaddr[IPADDR_LEN];
	unsigned stun_port;
	char turn_ipaddr[IPADDR_LEN];
	unsigned turn_port;
	char turn_username[USERNAME_LEN];
	char turn_password[PASSWORD_LEN];
	enum turn_protocal turn_protocal;
	char moh_filepath[FILEPATH];
};

/**
 * struct avs_addport_param - The parameters for AVS to allocate port resources.
 *
 * @conf_id:  Conference id.
 * @chan_id:  Channel id.
 * @enable_ice:  Whether to turn on ICE.
 * @enable_dtls:  Whether to turn DTLS.
 */
struct avs_addport_param {
	char conf_id[CONFID_LEN];
	char chan_id[CHANID_LEN];
	int enable_ice;
	int enable_dtls;
};

/**
 * struct avs_addport_resp_info - The response from AVS to avs_addport() commander.
 *
 * @resp:  Response informations from AVS.
 * @port_id:  Unique ID for a port resource.
 * @fingerprint_ice:  
 * @ice_ufrag:  Ice credentials
 * @ice_pwd:  Ice credentials
 * @rtp_port:  RTP port for video stream.
 * @rtcp_port:  RTP port for video stream.
 * @fingerprint_port:  
 */
struct avs_addport_resp_info {
	struct avs_response_common_info *resp;
	char pord_id[PORTID_LEN];
	char fingerprint_ice[FINGERPRINT_LEN];
	char ice_ufrag[ICEUFRAG_LEN];
	char ice_pwd[ICEPWD_LEN];
	int rtp_port;
	int rtcp_port;
	char fingerprint_port[FINGERPRINT_LEN];
};

/**
 * struct avs_delport - The parameters for AVS to deallocate port resources.
 *
 * @conf_id:  Conference id.
 * @chan_id:  Channel id.
 * @port_id:  Unique ID for a port resource.
 */
struct avs_delport_param {
	char conf_id[CONFID_LEN];
	char chan_id[CHANID_LEN];
	char port_id[PORTID_LEN];
};

/**
 * struct avs_addtrack - The parameters for AVS to set track informations.
 *
 * @conf_id:  Conference id.
 * @chan_id:  Channel id.
 * @track_id:  Track id. This must be generated by conference manager module.
 * @a_codec:  Audio encoder\decoder type.
 * @audio_payloadtype:  Audio payloadtype.
 * @audio_transmode:  1: sendrecv, 2: sendonly, 3: recvonly.
 * @v_codec:  Video encoder\decoder type.
 * @video_payloadtype:  Video payloadtype.
 * @video_transmode:  1: sendrecv, 2: sendonly, 3: recvonly.
 */
struct avs_addtrack_param {
	char conf_id[CONFID_LEN];
	char chan_id[CHANID_LEN];
	char track_id[TRACKID_LEN];
	enum avs_audio_codec a_codec;
	int audio_payloadtype;
	int audio_transmode;
	enum avs_video_codec v_codec;
	int video_payloadtype;
	int video_transmode;
};

/**
 * struct avs_setport_param - The parameters for AVS to set transport informations.
 *
 * @conf_id:  Conference id.
 * @chan_id:  Channel id.
 * @port_id:  Unique ID for a port resource.
 * @targetaddr:  Where AVS send media stream to.
 *
 */
struct avs_setport_param {
	char conf_id[CONFID_LEN];
	char chan_id[CHANID_LEN];
	char port_id[PORTID_LEN];
	char targetaddr[IPPORTADDR_LEN];
};

/**
 * avs_init - Establish a HTTP connection to AVS.
 *
 * Return: AVS_CMD_RESULT.
 */
AVS_CMD_RESULT avs_init(void);

/**
 * avs_shutdown - Close the connection with AVS, and release related resources.
 *
 * Return:.
 */
//void avs_shutdown(void);

/**
 * avs_setparam - Set parameters to AVS.
 * @param: parameters to be set. 
 * @resp: response informations from AVS 
 *
 * Return: AVS_CMD_RESULT.
 */
AVS_CMD_RESULT avs_setparam(struct avs_param *param, struct avs_common_resp_info *resp);

/**
 * avs_addport/avs_delport - Allocating port resources to AVS.
 * @param: parameters for allocating port resources. 
 * @resp: response informations for avs_addport() from AVS.
 *
 * Return: AVS_CMD_RESULT.
 */
//AVS_CMD_RESULT avs_addport(struct avs_addport_param *param, struct avs_addport_resp_info *resp);
//AVS_CMD_RESULT avs_delport(struct avs_delport_param *param, struct avs_common_resp_info *resp);

/**
 * avs_track - Allocating track resources to AVS.
 * @param: parameters for adding track to AVS.
 * @resp: response informations for avs_track() from AVS.
 *
 * Return: AVS_CMD_RESULT.
 */
//AVS_CMD_RESULT avs_track(struct avs_addtrack_param *param, struct avs_common_resp_info *resp);

/**
 * avs_setportparam - Set transport parameters to AVS.
 * @param: parameters for setting transport parameters to AVS.
 * @resp: response informations for avs_setportparam() from AVS.
 *
 * Return: AVS_CMD_RESULT.
 */
//AVS_CMD_RESULT avs_setportparam(struct avs_setport_param *param, struct avs_common_resp_info *resp);
#endif /* AVS_CONTROLLER_H */
